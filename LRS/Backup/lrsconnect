package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"net/http"
	"net/http/cookiejar"
	"time"
)

const followRedirectsHeader = "LRS-FollowRedirects"

var client *Client

type Client struct {
	HTTPClient *http.Client
}

//Init initializes the underlying client that communicates with Stormpath
func Init() {
	tr := &http.Transport{
		TLSClientConfig:    &tls.Config{},
		DisableCompression: true,
	}

	cookieJar, _ := cookiejar.New(nil)

	httpClient := &http.Client{Transport: tr,
		Jar: cookieJar} //Added to send cookies.

	client = &Client{httpClient}
}

func (client *Client) newRequestWithoutRedirects(method string, urlStr string, body interface{}) *http.Request {
	req := client.newRequest(method, urlStr, body)
	req.Header.Add(followRedirectsHeader, "false")
	return req
}

func (client *Client) newRequest(method string, urlStr string, body interface{}) *http.Request {

	//Works : Passing JSON String in bytes. []byte{<JSONString>} -> that reads to NewRequest.
	//	req, _ := http.NewRequest(method, urlStr, bytes.NewBuffer(body.([]byte)))

	//Works : Passing Structure :: struct -> []byte -> thats reads to NewRequest
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest(method, urlStr, bytes.NewReader(jsonBody))

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req.Header.Set("Host", "devconnect.lrsus.com")
	req.Header.Set("Accept-Encoding", "gzip, deflate")
	req.Header.Set("Origin", "https://devconnect.lrsus.com")
	//	req.Header.Set("X-Requested-With", "XMLHttpRequest")

	//	uuid, _ := uuid.NewV4()
	//	nonce := uuid.String()
	//Authenticate(req, jsonBody, time.Now().In(time.UTC), client.Credentials, nonce)
	return req
}

/*
func (client *Client) doWithResult(request *http.Request, result interface{}) error {
		var err error
		var response *http.Response

		key := request.URL.String()

		if client.Cache != nil && request.Method == "GET" && client.Cache.Exists(key) {
			err = client.Cache.Get(key, result)
		} else {
			fmt.Println("Strompath.go exeRequest")
			response, err = client.execRequest(request)
			if err != nil {
				return err
			}
			fmt.Printf("strompath.go Result Returned is %v", response)
			err = json.NewDecoder(response.Body).Decode(result)
		}

		if client.Cache != nil && err == nil {
			switch request.Method {
			case "POST", "DELETE", "PUT":
				client.Cache.Del(key)
				break
			case "GET":
				client.Cache.Set(key, result)
			}
		}

		return err
}


func (client *Client) execRequest(req *http.Request) (*http.Response, error) {
	fmt.Printf("exeRequest %v", req)
	if req.Header.Get(followRedirectsHeader) == "false" {
		fmt.Println("stromPath in execRequest")

		req.Header.Del(followRedirectsHeader)
		resp, err := client.HTTPClient.Transport.RoundTrip(req)

		fmt.Printf("One Request done %v \n", resp)
		err = handleResponseError(resp, err)
		if err != nil {
			ERROR.Printf("%s [%s]", err, resp.Request.URL.String())
			return nil, err
		}
		//Get the redirect location from the response headers

		fmt.Printf("Second Request begins \n")
		newReq := client.newRequest("GET", resp.Header.Get(locationHeader), emptyPayload())
		fmt.Printf("newRequest %v\n", newReq)
		return client.execRequest(newReq)
	}
	fmt.Println("stromPath in execRequest after")

	resp, err := client.HTTPClient.Do(req)
	return resp, handleResponseError(resp, err)
}
*/

//Impleemnting new Date.getTime() from JAVASCRIPT

func JSgetTime() int64 {
	test := time.Date(1970, 01, 01, 0, 0, 0, 0, time.UTC)
	//test, err := time.Parse("01/02/2006", "01/01/1970")

	ms1 := test.UnixNano() / int64(time.Millisecond)
	ms2 := time.Now().UnixNano() / int64(time.Millisecond)
	res := ms2 - ms1
	return res
}
